"use strict";
/* -------------------------------------------------------------------
 * Require Statements << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

var Config = require('Config');
var Crypto = require('crypto');
var HighlightJs = require('highlight.js');
var marked = require('marked');
var QueryString = require('querystring');
var thunkify = require('thunkify');

/* =============================================================================
 * 
 * Kirja - General utility methods.
 *  
 * ========================================================================== */

var Kirja = module.exports;

/* -------------------------------------------------------------------
 * Private Members Declaration << no methods >>
 * ---------------------------------------------------------------- */

var randomBytes = thunkify(Crypto.randomBytes);

var _markedNeedsSetup = true;

/* -------------------------------------------------------------------
 * Public Members Declaration << no methods >>
 * ---------------------------------------------------------------- */

// code

/* -------------------------------------------------------------------
 * Public Methods << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

Kirja.base64UrlSafeDecode = function (b64)
{
	return b64.replace(/[._-]/g, function (match)
	{
		switch (match)
		{
			case '.':
				return '+';
			case '_':
				return '/';
			case '-':
				return '=';
		}
	});
};

Kirja.base64UrlSafeEncode = function (b64)
{
	return b64.replace(/[+\/=]/g, function (match)
	{
		switch (match)
		{
			case '+':
				return '.';
			case '/':
				return '_';
			case '=':
				return '-';
		}
	});
};

Kirja.highlight = function (code, lang)
{
	if (lang)
		 return HighlightJs.highlight(lang, code, true).value;
	
	return HighlightJs.highlightAuto(code).value;
};

Kirja.markdown = function (md)
{
	if (_markedNeedsSetup)
	{
		_markedNeedsSetup = false;
		
		var options = {};
		for (var i in Config.settings.markdown)
		{
			if (i === 'highlightJs')
			{
				if (Config.settings.markdown[i])
				{
					// setup highlight.js
					options.highlight = Kirja.highlight;
				}
			}
			else
			{
				options[i] = Config.settings.markdown[i];
			}
		}
		
		options.renderer = new marked.Renderer();
		options.renderer.image = mdImageRenderer;
		
		marked.setOptions(options);
	}
	
	return marked(md);
};

Kirja.randomToken = function * ()
{
	var bytes = yield randomBytes(32);
	return bytes.toString('base64');
};

Kirja.url = function (action, params, query)
{
	var url = Config.settings.site.pathPrefix;
	if (typeof action === 'string')
	{
		// TODO: support params in plain string
		if (action[0] === '/')
			url += action;
		else
			url = action;
	}
	else if (typeof action === 'function' && action.trailRoute)
	{
		url += action.trailRoute.buildPath(params);
	}
	else if (action && typeof action.buildPath === 'function')
	{
		url += action.buildPath(params);
	}
	else
	{
		throw new Error('Cannot build url. Action must be a handler, route, or string');
	}
	
	if (query)
	{
		if (typeof query === 'string')
		{
			if (query[0] !== '?')
				url += '?';
			
			url += query;
		}
		else
		{
			url += QueryString.stringify(query);
		}
	}
	
	return url;
};

Kirja.validateEmail = function (email)
{
	if (typeof email !== 'string' || !email)
		throw new Error('Email address must be specified.');
	
	if (email.length > 250)
		throw new Error('Maximum email address length is 250 characters.');
	
	// very basic email regex
	if (!/^[^@]+@[^@]+\.[^@]+$/.test(email))
		throw new Error('Invalid email address.');
};

/* -------------------------------------------------------------------
 * Private Methods << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

/** @this {Renderer} */
function mdImageRenderer (href, title, text)
{
	var out = '<img src="' + href + '"';

	text = text.trim();
	if (text)
	{
		var match, style, className;
		if (match = /^&(?:gt|lt);/.exec(text))
		{
			if (match[0] === '&gt;')
				className = 'post-image-right';
			else
				className = 'post-image-left';

			out += ' class="' + className + '"';
			text = text.substr(match[0].length).trim();
		}

		if (match = /^\{(\d+),(\d+)\}/.exec(text))
		{
			if (match[1] === '0')
				style = 'max-height:' + match[2] + 'px;';
			else if (match[2] === '0')
				style = 'max-width:' + match[1] + 'px;';
			else
				style = 'width:' + match[1] + 'px;height:' + match[2] + 'px;';

			out += ' style="' + style + '"';
			text = text.substr(match[0].length).trim();
		}
	}
	
	out += ' alt="' + text + '"';
	
	if (title)
	{
		out += ' title="' + title + '"';
	}
	/* jshint validthis: true */
	out += this.options.xhtml ? '/>' : '>';
	
//	console.log({ href: href, title: title, text: text });
	return out;
}

/* -------------------------------------------------------------------
 * Initialization
 * ---------------------------------------------------------------- */

// If function calls need to be made to initialize the module, put those calls here.
