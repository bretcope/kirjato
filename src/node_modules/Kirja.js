"use strict";
/* -------------------------------------------------------------------
 * Require Statements << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

var Config = require('Config');
var Crypto = require('crypto');
var QueryString = require('querystring');
var thunkify = require('thunkify');

/* =============================================================================
 * 
 * Kirja - General utility methods.
 *  
 * ========================================================================== */

var Kirja = module.exports;

/* -------------------------------------------------------------------
 * Private Members Declaration << no methods >>
 * ---------------------------------------------------------------- */

var randomBytes = thunkify(Crypto.randomBytes);

/* -------------------------------------------------------------------
 * Public Members Declaration << no methods >>
 * ---------------------------------------------------------------- */

// code

/* -------------------------------------------------------------------
 * Public Methods << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

Kirja.base64UrlSafeDecode = function (b64)
{
	return b64.replace(/[._-]/g, function (match)
	{
		switch (match)
		{
			case '.':
				return '+';
			case '_':
				return '/';
			case '-':
				return '=';
		}
	});
};

Kirja.base64UrlSafeEncode = function (b64)
{
	return b64.replace(/[+\/=]/g, function (match)
	{
		switch (match)
		{
			case '+':
				return '.';
			case '/':
				return '_';
			case '=':
				return '-';
		}
	});
};

Kirja.randomToken = function * ()
{
	var bytes = yield randomBytes(32);
	return bytes.toString('base64');
};

Kirja.url = function (action, params, query)
{
	var url = Config.settings.site.pathPrefix;
	if (typeof action === 'string')
	{
		// TODO: support params in plain string
		if (action[0] === '/')
			url += action;
		else
			url = action;
	}
	else if (typeof action === 'function' && action.trailRoute)
	{
		url += action.trailRoute.buildPath(params);
	}
	else if (action && typeof action.buildPath === 'function')
	{
		url += action.buildPath(params);
	}
	else
	{
		throw new Error('Cannot build url. Action must be a handler, route, or string');
	}
	
	if (query)
	{
		if (typeof query === 'string')
		{
			if (query[0] !== '?')
				url += '?';
			
			url += query;
		}
		else
		{
			url += QueryString.stringify(query);
		}
	}
	
	return url;
};

Kirja.validateEmail = function (email)
{
	if (typeof email !== 'string' || !email)
		throw new Error('Email address must be specified.');
	
	if (email.length > 250)
		throw new Error('Maximum email address length is 250 characters.');
	
	// very basic email regex
	if (!/^[^@]+@[^@]+\.[^@]+$/.test(email))
		throw new Error('Invalid email address.');
};

/* -------------------------------------------------------------------
 * Private Methods << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

// code

/* -------------------------------------------------------------------
 * Initialization
 * ---------------------------------------------------------------- */

// If function calls need to be made to initialize the module, put those calls here.
