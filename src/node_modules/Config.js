"use strict";
/* -------------------------------------------------------------------
 * Require Statements << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

var Fs = require('fs');
var Path = require('path');

/* =============================================================================
 * 
 * Config Module
 *  
 * ========================================================================== */

var overrides = getOverrides();
var Config = getDefaults();
mergeConfig(overrides, Config);
validate();

module.exports = Config;

/* -------------------------------------------------------------------
 * Public Methods << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

Config.initialize = function * ()
{
	var Sql = require('Sql');
	// load settings stored in the database
	var result = yield Sql.query('select * from settings;');
	for (var i = 0; i < result.rows.length; i++)
	{
		setSetting(result.rows[i].name, result.rows[i].val);
	}

	Config.initialized = true;
	validate();
};

/**
 * 
 * @param name {string}
 * @param [value] {?string}
 * @param [tran] {Transaction}
 * @returns {*}
 */
Config.updateSetting = function (name, value, tran)
{
	var Sql = require('Sql');
	
	// check for valid setting
	//todo
	
	var sql, params;
	if (value === undefined)
	{
		// revert to default value
		sql = 'delete from settings where name = $1;';
		params = [ name ];
	}
	else
	{
		if (value !== null)
			value = String(value);

		// upsert new value
		sql = 'WITH upsert AS (UPDATE settings SET val=$2 WHERE name = $1 RETURNING *) ' +
			'INSERT INTO settings (name, val) SELECT $1, $2 WHERE NOT EXISTS (SELECT * FROM upsert);';
		params = [ name, value ];
	}
	
	setSetting(name, value);
	
	return tran ? tran.query(sql, params) : Sql.query(sql, params);
};

/* -------------------------------------------------------------------
 * Private Methods << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

function getDefaults ()
{
	var Config = {};
	
	Config.tier = overrides.tier;
	Config.initialized = false;
	
	// --- Postgres ---
	Config.sql = {};
	Config.sql.connectionString = null;
	
	// --- Settings ---
	// Anything in this hash can be overridden by the settings in the settings table.
	Config.settings = {
		auth: {
			allowInitialAdmin: true,
			cookieName: 'kirjato_auth'
		},
		site: {
			name: 'Kirjato',
			pathPrefix: '',
			writablePath: 'src/web/static',
			logoImage: '/static/img/logo.png'
		},
		sessions: {
			length: 14 * 24 * 60 * 60 * 1000 // two weeks
		},
		web: {
			http: {
				enabled: true,
				port: 80,
				host: '0.0.0.0'
			},
			https: {
				enabled: false,
				port: 443,
				host: '0.0.0.0',
				ssl: {
					key: null,
					cert: null,
					ca: null
				}
			}
		}
	};
	
	return Config;
}

function getOverrides ()
{
	var configPath = Path.resolve(__dirname, '../../config.json');
	if (!Fs.existsSync(configPath))
		throw new Error('config.json not found in application directory.');

	var file = Fs.readFileSync(configPath, { encoding: 'utf8' });
	try
	{
		return JSON.parse(file);
	}
	catch (ex)
	{
		throw new Error('config.json contains invalid JSON.');
	}
	
}

function mergeConfig (overrides, config)
{
	if (!config || typeof config !== 'object' || !overrides || typeof overrides !== 'object')
		throw new Error('Cannot merge configs. Value was expected to be an object.');
	
	for (var i in overrides)
	{
		if (config.hasOwnProperty(i))
		{
			if (config[i] && typeof config[i] === 'object' && !(config[i] instanceof Array))
			{
				mergeConfig(overrides[i], config[i]);
			}
			else
			{
				config[i] = overrides[i];
			}
		}
	}
}

function setSetting (name, val)
{
	var parts = name.split('.');
	var last = parts.pop();
	var obj = Config.settings;
	for (var i = 0; i < parts.length; i++)
		obj = obj[parts[i]];
	
	if (val.toLowerCase() === 'null')
	{
		obj[last] = null;
	}
	else if (typeof obj[last] === 'boolean')
	{
		obj[last] = val.toLowerCase() === 'true';
	}
	else if (typeof obj[i] === 'number')
	{
		obj[last] = Number(val);
	}
	else
	{
		obj[last] = val;
	}
	
}

function validate ()
{
	switch (Config.tier)
	{
		case 'local':
		case 'development':
		case 'production':
			break;
		default:
			throw new Error('Invalid Config.tier ' + Config.tier);
	}
	
	if (!Config.sql.connectionString)
		throw new Error('Must provide a PostgreSQL connection string.');
}
