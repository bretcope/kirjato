"use strict";
/* -------------------------------------------------------------------
 * Require Statements << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

var Config = require('Config');
var Kirja = require('Kirja');
var Sql = require('Sql');
var User = require('User');

/* =============================================================================
 * 
 * Session Class - Represents a user session.
 *  
 * ========================================================================== */

module.exports = Session;
Sql.setupType(Session, 'sessions');

function Session (user)
{
	this.token = null;
	this.userId = 0;
	this.createdDate = null;
	this.expireDate = null;
	
	if (user instanceof User)
	{
		this.userId = user.id;
		this.createdDate = new Date();
		this.expireDate = new Date(this.createdDate.getTime() + Config.settings.sessions.length);
	}
}

/* -------------------------------------------------------------------
 * Private Members Declaration << no methods >>
 * ---------------------------------------------------------------- */

// code

/* -------------------------------------------------------------------
 * Public Members Declaration << no methods >>
 * ---------------------------------------------------------------- */

Object.defineProperty(Session.prototype, 'isValid', {
	get: function () { return Date.now() < this.expireDate; }
});

/* -------------------------------------------------------------------
 * Public Static Methods << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

/**
 * 
 * @param row {object}
 * @param [prefix] {string}
 * @returns {Session}
 */
Session.fromRow = function (row, prefix)
{
	return Sql.objectFromRow(Session, row, prefix);
};

/* -------------------------------------------------------------------
 * Public Methods << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

/**
 * Saves the session if new, or updates the expiration date if it already exists.
 * @returns {boolean} True if the save was successful, otherwise false.
 */
Session.prototype.save = function * ()
{
	var isNew = this.token === null;
	var sql, params;
	if (isNew)
	{
		// new session
		this.token = yield Kirja.randomToken();
		sql = 'insert into sessions (token, user_id, created_date, expire_date) values ($1, $2, $3, $4);';
		params = [ this.token, this.userId, this.createdDate, this.expireDate ];
	}
	else
	{
		// update session - only expiration date can be modified
		sql = 'update sessions set expire_date = $1 where token = $2;';
		params = [ this.expireDate, this.token ];
	}
	
	var result = yield Sql.query(sql, params);
	if (result.rowCount !== 1)
	{
		if (isNew)
			this.token = null;
		
		throw new Error('Unable to save session.');
	}
};

/* -------------------------------------------------------------------
 * Private Methods << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

// code

/* -------------------------------------------------------------------
 * Initialization
 * ---------------------------------------------------------------- */

// If function calls need to be made to initialize the module, put those calls here.
