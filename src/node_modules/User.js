"use strict";
/* -------------------------------------------------------------------
 * Require Statements << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

var Crypto = require('crypto');
var Enums = require('Enums');
var Kirja = require('Kirja');
var Sql = require('Sql');
var thunkify = require('thunkify');

Crypto.pbkdf2_ = thunkify(Crypto.pbkdf2);

/* =============================================================================
 * 
 * User Class - Representing users.
 *  
 * ========================================================================== */

module.exports = User;
Sql.setupType(User, 'users');

function User ()
{
	/* -------------------------------------------------------------------
	 * Public Members Declaration << no methods >>
	 * ---------------------------------------------------------------- */
	
	this.id = 0;
	this.displayName = '';
	this.email = '';
	this.hash = null;
	this.salt = null;
	this.createdDate = null;
	this.deletedDate = null;
	this.type = Enums.UserTypes.NORMAL;
}

/* -------------------------------------------------------------------
 * Public Members Declaration << no methods >>
 * ---------------------------------------------------------------- */

Object.defineProperty(User.prototype, 'isDeleted', {
	get: function () { return this.deletedDate !== null; }
});

/* -------------------------------------------------------------------
 * Public Static Methods << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

User.byEmail = function * (email)
{
	var result = yield Sql.query('select * from users where email = $1;', [ email ]);
	if (result.rowCount === 0)
		return null;
	
	return User.fromRow(result.rows[0]);
};

/**
 * Creates a User object based on a row from the users table.
 * @param row {object}
 * @param [prefix] {string}
 * @returns {User}
 */
User.fromRow = function (row, prefix)
{
	return Sql.objectFromRow(User, row, prefix);
};

/* -------------------------------------------------------------------
 * Public Methods << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

/**
 * Determines whether the user has edit privileges for a given post.
 * @param post {Post}
 * @returns {boolean}
 */
User.prototype.canEditPost = function (post)
{
	//todo implement
	return true;
};

/**
 * @param user {User}
 * @returns {boolean}
 */
User.prototype.canEditUser = function (user)
{
	if (this.isDeleted)
		return false;
	
	if (this.id === user.id)
		return this.type !== Enums.UserTypes.SUSPENDED;
	
	if (this.type >= Enums.UserTypes.ADMIN)
		return true;
	
	return false;
};

/**
 * Determines whether the user can view a given post.
 * @param post {Post}
 * @returns {boolean}
 */
User.prototype.canViewPost = function (post)
{
	//todo implement
	return true;
};

/**
 * Checks whether the password matches the user's current password.
 * @param password {string}
 * @returns {boolean} True if the passwords match, false if they don't.
 */
User.prototype.passwordCheck = function * (password)
{
	var hash = yield passwordToHash(password, this.salt);
	return hash === this.hash;
};

/**
 * Generates a new salt and hash for the user.
 * @param password {string}
 */
User.prototype.passwordSet = function * (password)
{
	this.salt = yield Kirja.randomToken();
	this.hash = yield passwordToHash(password, this.salt);
};

/**
 * 
 * @param [tran] {Transaction}
 */
User.prototype.save = function * (tran)
{
	yield this.validate();

	var isNew = this.id === 0;
	var result = yield (isNew ? Sql.insert(tran, User, this) : Sql.update(tran, User, this));
	if (result.rowCount !== 1)
		throw new Error('Unable to save user.');
};

User.prototype.validate = function * ()
{
	if (!this.displayName || typeof this.displayName !== 'string' || this.displayName.length < 4 || this.displayName.length > 50)
		throw new Error('Display Name must be between 4 and 50 characters.');
	
	Kirja.validateEmail(this.email);
	
	if (this.id === 0)
	{
		// check if email is already in use
		var result = yield Sql.query('select id from users where email = $1;', [ this.email ]);
		if (result.rowCount > 0)
			throw new Error('Email Address is already being used.');
	}
	
	if (!this.hash || !this.salt)
		throw new Error('Credentials have not been setup on this user.');
};

/* -------------------------------------------------------------------
 * Private Methods << Keep in alphabetical order >>
 * ---------------------------------------------------------------- */

function * passwordToHash (password, salt)
{
	var key = yield Crypto.pbkdf2_(password, salt, 1023, 256);
	return key.toString('base64');
}
